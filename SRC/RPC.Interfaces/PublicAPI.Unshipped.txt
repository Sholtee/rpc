override Solti.Utils.Rpc.Interfaces.Version.Equals(object obj) -> bool
override Solti.Utils.Rpc.Interfaces.Version.GetHashCode() -> int
Solti.Utils.Rpc.Interfaces.AliasAttribute
Solti.Utils.Rpc.Interfaces.AliasAttribute.AliasAttribute(string name) -> void
Solti.Utils.Rpc.Interfaces.AliasAttribute.Name.get -> string
Solti.Utils.Rpc.Interfaces.ExceptionInfo
Solti.Utils.Rpc.Interfaces.ExceptionInfo.Data.get -> System.Collections.Generic.IDictionary<string, string>
Solti.Utils.Rpc.Interfaces.ExceptionInfo.Data.set -> void
Solti.Utils.Rpc.Interfaces.ExceptionInfo.ExceptionInfo() -> void
Solti.Utils.Rpc.Interfaces.ExceptionInfo.Message.get -> string
Solti.Utils.Rpc.Interfaces.ExceptionInfo.Message.set -> void
Solti.Utils.Rpc.Interfaces.ExceptionInfo.TypeName.get -> string
Solti.Utils.Rpc.Interfaces.ExceptionInfo.TypeName.set -> void
Solti.Utils.Rpc.Interfaces.HttpException
Solti.Utils.Rpc.Interfaces.HttpException.HttpException() -> void
Solti.Utils.Rpc.Interfaces.HttpException.HttpException(string message) -> void
Solti.Utils.Rpc.Interfaces.HttpException.HttpException(string message, System.Exception innerException) -> void
Solti.Utils.Rpc.Interfaces.HttpException.Status.get -> System.Net.HttpStatusCode
Solti.Utils.Rpc.Interfaces.HttpException.Status.set -> void
Solti.Utils.Rpc.Interfaces.IBuilder<TBuiltService>
Solti.Utils.Rpc.Interfaces.IBuilder<TBuiltService>.Build() -> TBuiltService
Solti.Utils.Rpc.Interfaces.IBuilder<TBuiltService>.IParameterizedBuilder<TParam>
Solti.Utils.Rpc.Interfaces.IBuilder<TBuiltService>.IParameterizedBuilder<TParam>.Build(TParam param) -> TBuiltService
Solti.Utils.Rpc.Interfaces.IConditionalValidatior
Solti.Utils.Rpc.Interfaces.IConditionalValidatior.ShouldRun(System.Reflection.MethodInfo! containingMethod, object?[]! args) -> bool
Solti.Utils.Rpc.Interfaces.ICustomValidator
Solti.Utils.Rpc.Interfaces.ICustomValidator.SupportsNull.get -> bool
Solti.Utils.Rpc.Interfaces.IDiProvider
Solti.Utils.Rpc.Interfaces.IDiProvider.CreateFactory(System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) -> Solti.Utils.DI.Interfaces.IScopeFactory
Solti.Utils.Rpc.Interfaces.IDiProvider.Services.get -> Solti.Utils.DI.Interfaces.IServiceCollection
Solti.Utils.Rpc.Interfaces.IgnoreAttribute
Solti.Utils.Rpc.Interfaces.IgnoreAttribute.IgnoreAttribute() -> void
Solti.Utils.Rpc.Interfaces.IHttpRequest
Solti.Utils.Rpc.Interfaces.IHttpRequest.Headers.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>
Solti.Utils.Rpc.Interfaces.IHttpRequest.Method.get -> string
Solti.Utils.Rpc.Interfaces.IHttpRequest.OriginalRequest.get -> object
Solti.Utils.Rpc.Interfaces.IHttpRequest.Payload.get -> System.IO.Stream
Solti.Utils.Rpc.Interfaces.IHttpRequest.QueryParameters.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>
Solti.Utils.Rpc.Interfaces.IHttpRequest.RemoteEndPoint.get -> System.Net.IPEndPoint
Solti.Utils.Rpc.Interfaces.IHttpResponse
Solti.Utils.Rpc.Interfaces.IHttpResponse.Close() -> System.Threading.Tasks.Task
Solti.Utils.Rpc.Interfaces.IHttpResponse.Headers.get -> System.Collections.Generic.IDictionary<string, string>
Solti.Utils.Rpc.Interfaces.IHttpResponse.IsClosed.get -> bool
Solti.Utils.Rpc.Interfaces.IHttpResponse.OriginalResponse.get -> object
Solti.Utils.Rpc.Interfaces.IHttpResponse.Payload.get -> System.IO.Stream
Solti.Utils.Rpc.Interfaces.IHttpResponse.StatusCode.get -> System.Net.HttpStatusCode
Solti.Utils.Rpc.Interfaces.IHttpResponse.StatusCode.set -> void
Solti.Utils.Rpc.Interfaces.IHttpServer
Solti.Utils.Rpc.Interfaces.IHttpServer.IsStarted.get -> bool
Solti.Utils.Rpc.Interfaces.IHttpServer.Start() -> void
Solti.Utils.Rpc.Interfaces.IHttpServer.Stop() -> void
Solti.Utils.Rpc.Interfaces.IHttpServer.Url.get -> string
Solti.Utils.Rpc.Interfaces.IHttpServer.WaitForSessionAsync(System.Threading.CancellationToken cancellation) -> System.Threading.Tasks.Task<Solti.Utils.Rpc.Interfaces.IHttpSession>
Solti.Utils.Rpc.Interfaces.IHttpSession
Solti.Utils.Rpc.Interfaces.IHttpSession.Request.get -> Solti.Utils.Rpc.Interfaces.IHttpRequest
Solti.Utils.Rpc.Interfaces.IHttpSession.Response.get -> Solti.Utils.Rpc.Interfaces.IHttpResponse
Solti.Utils.Rpc.Interfaces.IHttpSession.Server.get -> Solti.Utils.Rpc.Interfaces.IHttpServer
Solti.Utils.Rpc.Interfaces.IJsonSerializer
Solti.Utils.Rpc.Interfaces.IJsonSerializer.DeserializeMultiTypeArrayAsync(System.Collections.Generic.IReadOnlyList<System.Type> elementTypes, System.IO.Stream input, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object[]>
Solti.Utils.Rpc.Interfaces.IJsonSerializer.SerializeAsync(System.Type type, object obj, System.IO.Stream output, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Solti.Utils.Rpc.Interfaces.IParameterValidator
Solti.Utils.Rpc.Interfaces.IParameterValidator.ParameterValidationErrorMessage.get -> string
Solti.Utils.Rpc.Interfaces.IParameterValidator.ParameterValidationErrorMessage.set -> void
Solti.Utils.Rpc.Interfaces.IParameterValidator.Validate(System.Reflection.ParameterInfo! param, object? value) -> void
Solti.Utils.Rpc.Interfaces.IPredicate
Solti.Utils.Rpc.Interfaces.IPredicate.Execute(object? value) -> bool
Solti.Utils.Rpc.Interfaces.IPropertyValidator
Solti.Utils.Rpc.Interfaces.IPropertyValidator.PropertyValidationErrorMessage.get -> string
Solti.Utils.Rpc.Interfaces.IPropertyValidator.PropertyValidationErrorMessage.set -> void
Solti.Utils.Rpc.Interfaces.IPropertyValidator.Validate(System.Reflection.PropertyInfo! prop, object? value) -> void
Solti.Utils.Rpc.Interfaces.IRequestHandler
Solti.Utils.Rpc.Interfaces.IRequestHandler.HandleAsync(Solti.Utils.DI.Interfaces.IInjector scope, Solti.Utils.Rpc.Interfaces.IHttpSession context, System.Threading.CancellationToken cancellation) -> System.Threading.Tasks.Task
Solti.Utils.Rpc.Interfaces.IRequestHandler.Next.get -> Solti.Utils.Rpc.Interfaces.IRequestHandler
Solti.Utils.Rpc.Interfaces.IRequestPipeConfigurator
Solti.Utils.Rpc.Interfaces.IRequestPipeConfigurator.Use<TRequestHandlerBuilder>(System.Action<TRequestHandlerBuilder> configCallback = null) -> Solti.Utils.Rpc.Interfaces.IRequestPipeConfigurator
Solti.Utils.Rpc.Interfaces.IRoleManager
Solti.Utils.Rpc.Interfaces.IRoleManager.GetAssignedRoles(string sessionId) -> System.Enum
Solti.Utils.Rpc.Interfaces.IRoleManager.GetAssignedRolesAsync(string sessionId, System.Threading.CancellationToken cancellation) -> System.Threading.Tasks.Task<System.Enum>
Solti.Utils.Rpc.Interfaces.IRoleManager.ValidateFn.get -> System.Action<System.Collections.Generic.IReadOnlyList<System.Enum!>!, System.Enum!>?
Solti.Utils.Rpc.Interfaces.IRpcRequestContext
Solti.Utils.Rpc.Interfaces.IRpcRequestContext.Cancellation.get -> System.Threading.CancellationToken
Solti.Utils.Rpc.Interfaces.IRpcRequestContext.Method.get -> string
Solti.Utils.Rpc.Interfaces.IRpcRequestContext.Module.get -> string
Solti.Utils.Rpc.Interfaces.IRpcRequestContext.OriginalRequest.get -> Solti.Utils.Rpc.Interfaces.IHttpRequest
Solti.Utils.Rpc.Interfaces.IRpcRequestContext.Payload.get -> System.IO.Stream
Solti.Utils.Rpc.Interfaces.IRpcRequestContext.SessionId.get -> string
Solti.Utils.Rpc.Interfaces.IServiceDescriptor
Solti.Utils.Rpc.Interfaces.IServiceDescriptor.Name.get -> System.Threading.Tasks.Task<string>
Solti.Utils.Rpc.Interfaces.IServiceDescriptor.Version.get -> System.Threading.Tasks.Task<Solti.Utils.Rpc.Interfaces.Version>
Solti.Utils.Rpc.Interfaces.MemberInfoExtensions
Solti.Utils.Rpc.Interfaces.MissingModuleException
Solti.Utils.Rpc.Interfaces.MissingModuleException.MissingModuleException(string module) -> void
Solti.Utils.Rpc.Interfaces.PublishSchemaAttribute
Solti.Utils.Rpc.Interfaces.PublishSchemaAttribute.PublishSchemaAttribute() -> void
Solti.Utils.Rpc.Interfaces.ValidationException
Solti.Utils.Rpc.Interfaces.ValidationException.TargetName.get -> string
Solti.Utils.Rpc.Interfaces.ValidationException.TargetName.set -> void
Solti.Utils.Rpc.Interfaces.ValidationException.ValidationException() -> void
Solti.Utils.Rpc.Interfaces.ValidationException.ValidationException(string message) -> void
Solti.Utils.Rpc.Interfaces.ValidationException.ValidationException(string message, System.Exception innerException) -> void
Solti.Utils.Rpc.Interfaces.Version
Solti.Utils.Rpc.Interfaces.Version.Major.get -> int
Solti.Utils.Rpc.Interfaces.Version.Major.set -> void
Solti.Utils.Rpc.Interfaces.Version.Minor.get -> int
Solti.Utils.Rpc.Interfaces.Version.Minor.set -> void
Solti.Utils.Rpc.Interfaces.Version.Patch.get -> int
Solti.Utils.Rpc.Interfaces.Version.Patch.set -> void
Solti.Utils.Rpc.Interfaces.Version.Version() -> void
static Solti.Utils.Rpc.Interfaces.MemberInfoExtensions.GetId(this System.Reflection.MemberInfo member) -> string
static Solti.Utils.Rpc.Interfaces.Version.implicit operator Solti.Utils.Rpc.Interfaces.Version(System.Diagnostics.FileVersionInfo src) -> Solti.Utils.Rpc.Interfaces.Version
static Solti.Utils.Rpc.Interfaces.Version.implicit operator Solti.Utils.Rpc.Interfaces.Version(System.Version src) -> Solti.Utils.Rpc.Interfaces.Version